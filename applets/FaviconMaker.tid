parent-plugin: $:/plugins/bj/tiddywiki-preact
plugin-type: plugin
tags: 
title: $:/plugins/bj/FaviconMaker
type: application/json
version: 0.0.4

{
    "tiddlers": {
        "$:/bj/faviconMaker/blankicon": {
            "0": "white",
            "1": "blue",
            "2": "green",
            "3": "red",
            "4": "cyan",
            "5": "magenta",
            "6": "yellow",
            "7": "black",
            "created": "20240824194211497",
            "text": " [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n]",
            "tags": "",
            "title": "$:/bj/faviconMaker/blankicon",
            "modified": "20240827101339364",
            "type": "application/json"
        },
        "$:/bj/faviconMaker/colorpicker.mjs": {
            "created": "20240822091848804",
            "text": "const {html, render, signal, effect, useSignal} = await import (\"$:/plugins/bj/tiddlywiki-preact/preactsignal.mjs\");\n\nconst { ColorPicker } = await import ('$:/bj/faviconMaker/preactjs/colorpicker.mjs');\n \nfunction colorPickerApp({__state}) {\n\treturn html`\n    <div>\n      <h1>Color Picker</h1>\n      <${ColorPicker} initialColor=${__state['hue'].value} update=${nextValue => __state['hue'].value = nextValue}/>\n \n    </div>\n  `;\n}\n\nexport  {colorPickerApp as start};\n",
            "tags": "",
            "title": "$:/bj/faviconMaker/colorpicker.mjs",
            "modified": "20240827095301537",
            "type": "application/javascript"
        },
        "$:/bj/faviconMaker/favicon.mjs": {
            "created": "20240817132244061",
            "text": "const {html, render, signal, effect,useComputed, useSignal,useRef,useEffect,useSignalEffect } = await import (\"$:/plugins/bj/tiddlywiki-preact/preactsignal.mjs\");\n\n\nconst { TableComponent } = await import ('$:/bj/faviconMaker/preactjs/favicon.mjs');\n\nconst { getTextReference } = await import ('$:/plugins/bj/tiddlywiki-preact/store.js');\n\n\n/*\nthis seems to also work \n\nuseEffect(() => {\n\t\t//hack to watch for tiddler change\n\t\t//state['table'].value;\n\t\tTidName = __toTiddlers['table'];\n\t    console.log(\"tid has changed:\",TidName);\n\t\tfor (var i = 0;i<8;i++){colors[i]=getTextReference(`${TidName}!!${i}`)}\n\t    console.log(\"tid has changed:\",colors);\n\t},[state['table']]);\n\n\n*/\n\nfunction faviconApp({__state,__toTiddlers, colorsel}) {\n\tlet colors=[];\n\tlet TidName = __toTiddlers['table'];\n\tconst state = __state\n\tuseSignalEffect(() => {\n\t\t//hack to watch for tiddler change\n\t\tstate['table'].value;\n\t\tTidName = __toTiddlers['table'];\n\t\tfor (var i = 0;i<8;i++){colors[i]=getTextReference(`${TidName}!!${i}`)}\n\t});\n\n\tfor (var i = 0;i<8;i++){colors[i]=getTextReference(`${TidName}!!${i}`)}\n\treturn html`\n\t<div id=\"dateApp\">\n\t    <${TableComponent} userdata=${state['table']} colors=${colors} colorsel=${colorsel}/>\n\t</div>\n  `;\n}\n\nexport  {faviconApp as start};\n",
            "tags": "",
            "title": "$:/bj/faviconMaker/favicon.mjs",
            "modified": "20240830134652807",
            "type": "application/javascript"
        },
        "$:/bj/faviconMaker/preactjs/colorpicker.mjs": {
            "created": "20240822132537820",
            "text": "const {html, render, signal, effect, useSignal, useState, useEffect, useRef,computed} = await import (\"$:/plugins/bj/tiddlywiki-preact/preactsignal.mjs\");\n\nconst {hsbToRgb,parseColorToHSB,rgbToHex} = await import (\"$:/bj/faviconMaker/preactjs/colorutils.mjs\");\n\n\n\nconst sliderStyle = {\n\twidth: '100%',\n\theight: '8px',\n\tborderRadius: '8px',\n\tappearance: 'none',\n\tcursor: 'pointer',\n\tbackground: 'linear-gradient(to right, red, yellow, lime, cyan, blue, magenta, red)',\n};\n\nfunction squareStyle(hue) {\n\treturn {width: '200px', height: '200px', position: 'relative', background: \n\t`linear-gradient(to bottom,rgba(0,0,0,1), rgba(ff,0,0,1)),background-blend-mode: multiply`}\n}\n\nexport function ColorPicker({ initialColor, update }) {\n  // Convert initial color to HSB format when first rendered\n\tconst [h1, s1, b1] = parseColorToHSB(initialColor);\n\tconst [hue, setHue] = useState(h1);\n\tconst [saturation, setSaturation] = useState(s1);\n\tconst [brightness, setBrightness] = useState(b1);\n\n\tconst squareRef = useRef(null);\n\n  // reset initial color state from props when re-render\n  useEffect(() => {\n    const [h, s, b] = parseColorToHSB(initialColor);\n    setHue(h);\n    setSaturation(s);\n    setBrightness(b);\n  }, [initialColor]);\n\n  // Update the square background whenever hue changes\n  useEffect(() => {\n    updateSquareBackground();\n  }, [hue]);\n\n  // Notify the parent component of color changes\n  useEffect(() => {\n    const rgbColor = hsbToRgb(hue, saturation, brightness);\n    const hexColor = rgbToHex(rgbColor);\n    update(hexColor); // Call the update callback with the new hex color\n  }, [hue, saturation, brightness]);\n\n\n\n  // Update the saturation-brightness square based on the hue\n  function updateSquareBackground() {\n    if (squareRef.current) {\n\t\tsquareRef.current.style.background = `\nlinear-gradient(to right,hsl(${hue}, 0%, 100%),hsl(${hue}, 100%, 50%)),linear-gradient(to bottom,rgba(0,0,0,0),rgba(0,0,0,1))`;\n\n\t\tsquareRef.current.style[\"background-blend-mode\"]= \"multiply\"\n    }\n  }\n\n  // Handle hue changes from the slider\n  function handleHueChange(event) {\n    setHue(event.target.value);\n  }\n\n  // Handle mouse click in the saturation-brightness square\n  function handleSquareClick(event) {\n    const rect = squareRef.current.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const saturation = (x / rect.width) * 100;\n    const brightness = 100 - (y / rect.height) * 100;\n    setSaturation(saturation);\n    setBrightness(brightness);\n  }\nfunction squareStyleInner(brightness,saturation) {\n\treturn {\n\t\tposition: 'absolute',\n\t\ttop: `${100 - brightness}%`,\n\t\tleft: `${saturation}%`,\n\t\twidth: '10px',\n\t\theight: '10px',\n\t\tbackgroundColor: 'white',\n\t\tborder: '2px solid black',\n\t\tborderRadius: '50%',\n\t\ttransform: 'translate(-50%, -50%)',\n    }\n}\t\n\treturn html`\n    <div style=\"display: flex; flex-direction: column; align-items: center; gap: 20px;\">\n      <!-- Hue Slider with Gradient Background -->\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"360\"\n        value=${hue}\n        onInput=${handleHueChange}\n        style=${sliderStyle}\n      />\n      \n      <!-- Saturation-Brightness Square -->\n      <div\n        ref=${squareRef}\n        onClick=${handleSquareClick}\n        style=${squareStyle(hue)}\n      >\n        <div\n          style=${squareStyleInner(brightness,saturation)}\n        ></div>\n      </div>\n    </div>\n  `;\n}",
            "tags": "",
            "title": "$:/bj/faviconMaker/preactjs/colorpicker.mjs",
            "modified": "20240827070939223",
            "type": "application/javascript"
        },
        "$:/bj/faviconMaker/preactjs/colorutils.mjs": {
            "created": "20240826060333381",
            "text": "\nexport function namedColorToRgb(colorName) {\n  // Create a temporary element to use the browser's color parsing\n  const tempElem = document.createElement('div');\n  tempElem.style.color = colorName;\n  document.body.appendChild(tempElem);\n  \n  // Get the computed style (which will be in RGB format)\n  const computedColor = window.getComputedStyle(tempElem).color;\n  \n  // Remove the temporary element\n  document.body.removeChild(tempElem);\n  console.log('xxx',computedColor)\n  // Extract RGB values\n  const rgbMatch = computedColor.match(/\\d+/g);\n  if (rgbMatch) {\n     return rgbMatch.map(Number);\n\t  \n  }\n  \n  return null; // Return null if color name is invalid\n}\n\n\n\t\n  // Convert HSB/HSV to RGB\nexport  function hsbToRgb(h, s, v) {\n    s /= 100;\n    v /= 100;\n    const k = (n) => (n + h / 60) % 6;\n    const f = (n) => v - v * s * Math.max(Math.min(k(n), 4 - k(n), 1), 0);\n    return [Math.round(f(5) * 255), Math.round(f(3) * 255), Math.round(f(1) * 255)];\n  }\n\n  // Convert RGB to hex format\nexport  function rgbToHex([r, g, b]) {\n    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()}`;\n  }\n\n  // Parse color to HSB (assuming initialColor is in hex format)\nexport  function parseColorToHSB(hex) {\n\tlet rgb;\n\tif (hex[0] !=='#') rgb=namedColorToRgb(hex)\n    else rgb = hexToRgb(hex);\n    return rgbToHsb(rgb[0], rgb[1], rgb[2]);\n  }\n\n  // Convert hex to RGB\nexport  function hexToRgb(hex) {\n    hex = hex.replace(/^#/, '');\n    if (hex.length === 3) {\n      hex = hex.split('').map((h) => h + h).join('');\n    }\n    const bigint = parseInt(hex, 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n    return [r, g, b];\n  }\n\n  // Convert RGB to HSB\nexport  function rgbToHsb(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const d = max - min;\n    let h = 0;\n    const s = max === 0 ? 0 : (d / max) * 100;\n    const v = max * 100;\n\n    if (d !== 0) {\n      switch (max) {\n        case r:\n          h = ((g - b) / d + (g < b ? 6 : 0)) * 60;\n          break;\n        case g:\n          h = ((b - r) / d + 2) * 60;\n          break;\n        case b:\n          h = ((r - g) / d + 4) * 60;\n          break;\n      }\n    }\n\n    return [Math.round(h), Math.round(s), Math.round(v)];\n  }\n\nexport function rgbArrayToPNG(rgbArray) {\n  // Create a canvas element\n  const canvas = document.createElement('canvas');\n  canvas.width = 16;\n  canvas.height = 16;\n  const ctx = canvas.getContext('2d');\n\n  // Create an ImageData object\n  const imageData = ctx.createImageData(16, 16);\n\n  // Fill the ImageData with RGB values from the array\n  for (let y = 0; y < 16; y++) {\n    for (let x = 0; x < 16; x++) {\n      const index = (y * 16 + x) * 4;\n      const rgb = rgbArray[y][x];\n      imageData.data[index] = rgb[0];     // R\n      imageData.data[index + 1] = rgb[1]; // G\n      imageData.data[index + 2] = rgb[2]; // B\n      imageData.data[index + 3] = 255;    // A (fully opaque)\n    }\n  }\n\n  // Put the ImageData onto the canvas\n  ctx.putImageData(imageData, 0, 0);\n\n  // Convert the canvas to a PNG data URL\n  return canvas.toDataURL('image/png');\n}\n\n// Example usage:\nfunction generateRandomRGBArray() {\n  return Array(16).fill().map(() => \n    Array(16).fill().map(() => \n      [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)]\n    )\n  );\n}\n",
            "tags": "",
            "title": "$:/bj/faviconMaker/preactjs/colorutils.mjs",
            "modified": "20240830134818960",
            "type": "application/javascript"
        },
        "$:/bj/faviconMaker/preactjs/favicon.mjs": {
            "created": "20240822063418878",
            "text": "const {html, render, signal, effect, computed, useEffect, useState, useSignal, useComputed,useRef} =  await import (\"$:/plugins/bj/tiddlywiki-preact/preactsignal.mjs\");\n\n//const colors =[\"red\", \"green\", \"blue\"]\n\n\nexport function TableComponent({ userdata ,colors, colorsel}) {\n  // Initialize the state with the passed userdata\n  //const [data, setData] = useState(userdata.peek());\n  \n  //const [isMouseDown, setIsMouseDown] = useState(false);\nlet isMouseDown=useRef(false);\n\t\nfunction\tsetIsMouseDown (down) {isMouseDown.current=down}\n  // Handle the click event on a cell\n  const handleCellClick = (rowIndex, colIndex) => {\n    // Create a copy of the data array\n    const newData = userdata.value.map(row => row.slice());\n\n    // paint the specific cell's value\n    newData[rowIndex][colIndex] = colorsel*1;\nuserdata.value=newData\n    // Update the state with the new array\n    //setData(newData);\n  };\n\n//effect(() =>{setData(userdata.value)})\n  const handleMouseDown = (e) => {\n\te.preventDefault(); \n\tsetIsMouseDown(true);\n\n  };\n\n  const handleMouseUp = () => {\n    setIsMouseDown(false); \n\t  //userdata.value = data;\n  };\n\n  const handleMouseOver = (rowIndex, colIndex) => {\n    if (isMouseDown.current) {\n      handleCellClick(rowIndex, colIndex);\n    }\n  };\n\n  return html`\n    <div \n      onMouseDown=${handleMouseDown} \n      onMouseUp=${handleMouseUp} \n      onMouseLeave=${handleMouseUp} \n    >\n      <table>\n        <tbody>\n          ${userdata.value.map((row, rowIndex) => html`\n            <tr key=${rowIndex}>\n              ${row.map((cell, colIndex) => html`\n                <td \n                  key=${colIndex}\n                  onMouseOver=${() => handleMouseOver(rowIndex, colIndex)}\n                  onMouseDown=${() => handleCellClick(rowIndex, colIndex)}\n                  style=${{\n                    border: '1px solid black', \n                    padding: '10px', \n                    cursor: 'pointer', \n                    textAlign: 'center',\n\t\t\t\t\tbackground: colors[cell]\n                  }}\n                >\n                </td>\n              `)}\n            </tr>\n          `)}\n        </tbody>\n      </table>\n    </div>\n  `;\n};\n\n\n\n",
            "tags": "",
            "title": "$:/bj/faviconMaker/preactjs/favicon.mjs",
            "modified": "20240830164501654",
            "type": "application/javascript"
        },
        "$:/bj/faviconMaker/topng.mjs": {
            "created": "20240826103714829",
            "text": "const imports = await import (\"$:/plugins/bj/tiddlywiki-preact/preactsignal.mjs\");\n\nconst {html, render, signal, effect,useComputed, useSignal,useRef,useEffect } = imports; \n\nconst {hexToRgb,rgbArrayToPNG} = await import (\"$:/bj/faviconMaker/preactjs/colorutils.mjs\");\nconst { getTextReference,setTextReference } = await import ('$:/plugins/bj/tiddlywiki-preact/store.js');\n \nfunction  doToFav(table,sourceTid,toTid){\n\tlet colors=[];\n\tsetTextReference(`${toTid}!!type`,\"image/x-icon\")\n\tfor (var i = 0;i<8;i++){colors[i]=getTextReference(`${sourceTid}!!${i}`)}\n\tsetTextReference(toTid,rgbArrayToPNG(table.map(row => row.map(value => hexToRgb(colors[value])))).split(',')[1]);\n\n}\n\nfunction doPng(table,TidName){\n\tlet colors=[];\n\t\n\tfor (var i = 0;i<8;i++){colors[i]=getTextReference(`${TidName}!!${i}`)}\n\twriteClipboardText(rgbArrayToPNG(table.map(row => row.map(value => hexToRgb(colors[value])))));\n\n}\nasync function writeClipboardText(text) {\n  try {\n    await navigator.clipboard.writeText(text);\n  } catch (error) {\n    console.error(error.message);\n  }\n}\nfunction toPngApp({__state,__toTiddlers,toTid}) {\n\t\n\treturn  html`\n\t  <button onClick=${() => (doPng(__state[\"table\"].value,__toTiddlers['table']))}>\n\t\tcopy PNG to clipboard\n\t  </button>\n\t\t<button onClick=${() => (doToFav(__state[\"table\"].value,__toTiddlers['table'],toTid))}>\n\t\tcopy favicon to ${toTid}\n\t  </button>`\n}\n\nexport  {toPngApp as start};\n",
            "tags": "",
            "title": "$:/bj/faviconMaker/topng.mjs",
            "modified": "20240830164415934",
            "type": "application/javascript"
        },
        "$:/bj/faviconMaker/faviconMaker": {
            "created": "20240825173533698",
            "text": "\\import $:/bj/faviconMaker/mkfaviconWidgets\n\n\\define NewFav()\n<$action-createtiddler $basetitle=\"icon\" $template=\"$:/bj/faviconMaker/blankicon\" tags=\"protoFavicon\"/>\n\\end\n\nselect favicon<$select tiddler=<<qualify '$:/temp/select-icon'>> default='icon'>\n<$list filter='[tag[protoFavicon]]'>\n   <option value=<<currentTiddler>>><$view field='title'/></option>\n</$list>\n</$select>\n<$button actions=<<NewFav>>>\n   new favicon\n</$button>\n\n<$vars currentTiddler={{{[<qualify \"$:/temp/select-icon\">get[text]else[icon]]}}}>\n<$list filter='[all[current]get[title]]' variable=n emptyMessage=\"\">\n\n<$mkfavicon.topng tid=<<currentTiddler>> toTid=\"$:/favicon.ico\"/>\n\n<$vars xcolor={{{[<qualify \"$:/temp/color\">get[text]else[0]]}}} space=\"charcode[160]\">\n<table><tr>\n\t<table><tr>\n\t<$list filter=\"0 1 2 3 4 5 6 7\" variable=n>\n\t<$vars color={{{[<currentTiddler>get<n>]}}}>\n\t\t<td style=`padding: 0;`>\n\t\t<$button style=`width:100%;height:100%;background:$(color)$;`set=<<qualify \"$:/temp/color\">> setTo=<<n>>>\n\t\t\t{{{[<n>compare:number:eq<xcolor>then[⚫]]}}}&nbsp;\n\t\t</$button>\n\t\t</td>\n\t</$vars>\n\t</$list>\n\t</tr></table>\n\t<tr></tr>\n\t<$mkfavicon.colorsel tid=<<currentTiddler>> num=<<xcolor>>/>\n</tr></table>\n<$mkfavicon.edit tid=<<currentTiddler>> colorsel=<<xcolor>>/></$vars></$list>",
            "tags": "app",
            "title": "$:/bj/faviconMaker/faviconMaker",
            "modified": "20240830131602543"
        },
        "$:/bj/faviconMaker/mkfaviconWidgets": {
            "created": "20240828095412682",
            "text": "\\widget $mkfavicon.edit(tid,colorsel:0 )\n<$pwidget $app=\"$:/bj/faviconMaker/favicon.mjs\" $tids=`[[:table|$(tid)$]]` colorsel=<<colorsel>> errorMessage=\"<Error in Edit\"/>\n\\end\n\n\\widget $mkfavicon.colorsel(tid,num:0)\n<$pwidget $app=\"$:/bj/faviconMaker/colorpicker.mjs\" $tids=`[[hue|$(tid)$!!$(num)$]] ` errorMessage=\"Error in colsel\"/>\n\\end\n\n\\widget $mkfavicon.topng(tid, toTid)\n<$pwidget $app=\"$:/bj/faviconMaker/topng.mjs\" $tids=`[[:table|$(tid)$]]` toTid=<<toTid>> errorMessage=\"Error in topng\"/>\n\\end\n",
            "tags": "",
            "title": "$:/bj/faviconMaker/mkfaviconWidgets",
            "modified": "20240830131518480",
            "code-body": "yes"
        }
    }
}
